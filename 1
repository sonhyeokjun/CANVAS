html 에서는 element만 그리면 가능

.context - 붓 부러쉬
 ctx


javascript한테 css를 똑같이 적어준다.



const canvas = document.querySelector("canvas");  캔버스 자바스크립트로 생성
const ctx = canvas.getContext("2d");      캔버스한테 붓을 지여준다.
canvas.width = 800;                            캔버스 크기설정
canvas.height = 800;                           캔버스 크기설정

ctx.fillRect(50, 50, 100, 200);                   사각형을 x축 50 y축 50 가로 100 세로 200으로 채어워주낟 



<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meme Maker</title>
    <link rel="stylesheet" href="style.css" />
</head>

<body>
    <canvas></canvas>
    <script src="app.js"></script>
</body>

</html>


canvas {
  width: 800px;
  height: 800px;
  border: 5px solid black;
}

body {
  display: flex;
  justify-content: center;
  align-items: center;
}


JS에서 canvas를 사용해 브라우저에 2D 혹은 3D 그래픽을 그릴 수 있다.
html에서는 canvas 한 번 써주는 게 전부이고,
나머지 작업은 대부분 js에서 이루어진다.

1. JS에서 canvas 불러오기
- const canvas = document.querySelector("canvas");

2. context 작성
- context는 캔버스에 그림을 그릴 때 사용하는 붓이다.
- canvas.getContext 로 불러온 다음 2d를 선택한다. (주의! d 소문자임)

3. 캔버스 크기 설정
- css에서 캔버스 크기 설정을 한 후 js에서도 작성해준다.
- 이후에는 width 와 height를 js에서만 수정할 것임 (css에서 X)

4. 캔버스 위에 사각형 그리기
- canvas 좌표 시스템:
캔버스 좌상단이 좌표 0.0, 가로 X, 세로 Y
- 사각형 채우는 함수 fillRect 작성
-> ctx.fillRect(x값, y값, w값, h값);







const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
canvas.width = 800;
canvas.height = 800;

ctx.rect(50, 50, 100, 100);
ctx.rect(150, 150, 100, 100);
ctx.rect(250, 250, 100, 100);
ctx.fill();

ctx.beginPath();
ctx.rect(350, 350, 100, 100);
ctx.rect(450, 450, 100, 100);
ctx.fillStyle = "red";
ctx.fill();









경로라는 함수를 배운다
fillrect 함수는 사실 단축 함수다.
채우고 사각형을 그리고 이과정이 담겨있는것이다.

기본적으로
ctx.rect 를하면 선을 그리고
ctx.fill()을 해야 채워진다.
하지만 경로라는 개념이 존재하는데

beginpath()라는 함수를 쓰면 이전경로와 다른경로를 만들어줘서
새로운 색을 채워넣어줄수있다.

사실 사각형을 그리려면 기본적인 단계들을 하나씩 거쳐야 함
- 사각형 선 그리기: ctx.rect(x, y, w, h);
- 선의 색이 적용되지 않아서 보이지 않는다
-> 다음 줄에 ctx.stroke() / ctx.fill() 해서 테두리만 그리거나 채울 수 있음
- 끊어가기를 원하는 곳 맨 앞에 ctx.beginPath();추가해 새 경로 만들기.

*요약
- canvas에서 그림을 그릴 때는 단계별로 진행 필요
- 그린 그림들의 경로를 나눌 수 있음
-> 새 경로 시작하기: beginPath()






ctx.moveTo(50, 50);
ctx.lineTo(150, 50);
ctx.lineTo(150, 150);
ctx.lineTo(50, 150);
ctx.lineTo(50, 50);
ctx.fill();




fillRect() -> fill() + rect()
rect() -> moveTo() + lineTo()

사실 rect 조차 shortcut function이었다는 점..(빠밤)
더 작게 나눠진 function을 써보자! -> moveTo / lineTo

- moveTo(x, y); -> 브러쉬의 좌표를 움직여줌
- lineTo(x, y) -> 라인을 그려줌

*수평인 직선을 그리려면 두 y값이 같아야 한다
*라인이 끝난 점이 다음에 시작하는 브러쉬 좌표이다
* 정리하자면 fillRect = fill+Rect = fill + (moveTo+lineTo)

+ (연습) 선으로 사각형 그리기





ctx.fillRect(200, 200, 50, 200);
ctx.fillRect(400, 200, 50, 200);
ctx.fillRect(300, 300, 50, 100);
ctx.fillRect(200, 200, 200, 20);
ctx.moveTo(200, 200);
ctx.lineTo(325, 100);
ctx.lineTo(450, 200);
ctx.fill();

 집만들기



ctx.fillRect(210 - 40, 200 - 30, 15, 100);
ctx.fillRect(350 - 40, 200 - 30, 15, 100);
ctx.fillRect(260 - 40, 200 - 30, 60, 200);

ctx.arc(250, 100, 50, 0, 2 * Math.PI);
ctx.fill();

ctx.beginPath();
ctx.fillStyle = "white";
ctx.arc(260 + 10, 80, 8, Math.PI, 2 * Math.PI);
ctx.arc(220 + 10, 80, 8, Math.PI, 2 * Math.PI);
ctx.fill();


사람 웃는 얼굴 만들기








프로토타입 배우기

클릭하면 선을 긋고 싶다



const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
canvas.width = 800;
canvas.height = 800;
ctx.lineWidth = 2;

let isPainting;

function onMouseMove(event) {
  if (isPainting) {
    ctx.lineTo(event.offsetX, event.offsetY);
    ctx.stroke();
    return;
  }
  ctx.moveTo(event.offsetX, event.offsetY);
}

function onMouseDown() {
  isPainting = true;
}

function cancelPainting() {
  isPainting = false;
}

canvas.addEventListener("mouseleave", cancelPainting);
canvas.addEventListener("mouseup", cancelPainting);
canvas.addEventListener("mousedown", onMouseDown);
canvas.addEventListener("mousemove", onMouseMove);







const widthSet = document.getElementById("width-set");
const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
canvas.width = 800;
canvas.height = 800;
ctx.lineWidth = widthSet.value;

let isPainting = false;

function onMouseMove(event) {
  if (isPainting) {
    ctx.lineTo(event.offsetX, event.offsetY);
    ctx.stroke();
    return;
  }
  ctx.beginPath();
  ctx.moveTo(event.offsetX, event.offsetY);
}

function onMouseDown() {
  isPainting = true;
}

function cancelPainting() {
  isPainting = false;
}

function changeWidth(event) {
  ctx.lineWidth = event.target.value;
}

widthSet.addEventListener("change", changeWidth);
canvas.addEventListener("mouseleave", cancelPainting);
canvas.addEventListener("mouseup", cancelPainting);
canvas.addEventListener("mousedown", onMouseDown);
canvas.addEventListener("mousemove", onMouseMove);






<input type="color" id="color" />


function onColorChange(event) {
  ctx.strokeStyle = event.target.value;
  ctx.fillStyle = event.target.value;
}



color.addEventListener("change", onColorChange);






const colorOptions = Array.from(
  document.getElementsByClassName("color-option")
);
const color = document.getElementById("color");
const widthSet = document.getElementById("width-set");
const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");
canvas.width = 800;
canvas.height = 800;
ctx.lineWidth = widthSet.value;

let isPainting = false;

function onMouseMove(event) {
  if (isPainting) {
    ctx.lineTo(event.offsetX, event.offsetY);
    ctx.stroke();
    return;
  }
  ctx.beginPath();
  ctx.moveTo(event.offsetX, event.offsetY);
}

function onMouseDown() {
  isPainting = true;
}

function cancelPainting() {
  isPainting = false;
}

function changeWidth(event) {
  ctx.lineWidth = event.target.value;
}

function onColorChange(e) {
  ctx.strokeStyle = ctx.fillStyle = e.target.value;
}
function onColorClick(e) {
  const colorValue = e.target.dataset.color;
  ctx.strokeStyle = ctx.fillStyle = color.value = colorValue;
}

widthSet.addEventListener("change", changeWidth);
canvas.addEventListener("mouseleave", cancelPainting);
canvas.addEventListener("mouseup", cancelPainting);
canvas.addEventListener("mousedown", onMouseDown);
canvas.addEventListener("mousemove", onMouseMove);
color.addEventListener("change", onColorChange);

colorOptions.forEach((color) => color.addEventListener("click", onColorClick));



